// Generated by CoffeeScript 1.6.1
(function() {
  var ACK, CONNECT, DISCONNECT, ERROR, EVENT, HEARTBEAT, JSON_MESSAGE, MESSAGE, NOOP, Websocket, handshakeStart, http, numConnAttempts, websocketConnect, _ref;

  http = require('http');

  Websocket = require("Websocket");

  _ref = [0, 1, 2, 3, 4, 5, 6, 7, 8], DISCONNECT = _ref[0], CONNECT = _ref[1], HEARTBEAT = _ref[2], MESSAGE = _ref[3], JSON_MESSAGE = _ref[4], EVENT = _ref[5], ACK = _ref[6], ERROR = _ref[7], NOOP = _ref[8];

  numConnAttempts = 0;

  websocketConnect = function(sessionId) {
    var WebSocketClient, client;
    WebSocketClient = require('websocket').client;
    client = new WebSocketClient();
    client.on("connectFailed", function() {
      console.log("client - connectFailed ");
      if (numConnAttempts < 3) {
        numConnAttempts = numConnAttempts + 1;
        return websocketConnect();
      }
    });
    client.on("connect", function(connection) {
      var msgId, timer;
      msgId = 1;
      console.log("client - connected ");
      connection.on("error", function(error) {
        return console.log("client - error: ", error);
      });
      connection.on("close", function(error) {
        return console.log("client - connection closed by server");
      });
      connection.on("message", function(message) {
        var encodeRe, match, msgData, msgEndpoint, msgType, _ref1;
        console.log("raw msg:\n", message);
        if (message.type === 'utf8') {
          encodeRe = /^(\d+):(\d*):(\d*):(.*)$/;
          match = encodeRe.exec(message.utf8Data);
          if (match) {
            _ref1 = match.slice(1, 5), msgType = _ref1[0], msgId = _ref1[1], msgEndpoint = _ref1[2], msgData = _ref1[3];
            console.log("[msgType, msgId, msgEndpoint, msgData]", [msgType, msgId, msgEndpoint, msgData]);
            switch (match[1]) {
              case String(DISCONNECT):
                return console.log("DISCONNECT", match[4]);
              case String(CONNECT):
                return console.log("CONNECT", match[4]);
              case String(HEARTBEAT):
                return console.log("HEARTBEAT", match[4]);
              case String(MESSAGE):
                return console.log("MESSAGE", match[4]);
              case String(JSON_MESSAGE):
                return console.log("JSON_MESSAGE", match[4]);
              case String(EVENT):
                return console.log("EVENT", match[4]);
              case String(ACK):
                return console.log("ACK", msgId);
              case String(ERROR):
                return console.log("ERROR", match[4]);
              case String(NOOP):
                return console.log("NOOP", match[4]);
            }
          } else {
            return console.log("client - unrecognized msg: \n", message);
          }
        }
      });
      return timer = setInterval(function() {
        var number;
        if (!connection.connected) {
          clearInterval(timer);
          return;
        }
        number = Math.round(Math.random() * 0xFFFFFF);
        console.log("sending", number);
        connection.sendUTF(("3:1:" + msgId + ":my-message") + number);
        return msgId = msgId + 1;
      }, 1000);
    });
    return client.connect('ws://localhost:3000/socket.io/1/websocket/' + sessionId);
  };

  handshakeStart = function() {
    var handshakeCb, options, req;
    options = {
      host: 'localhost',
      port: 3000,
      path: '/socket.io/1/websocket'
    };
    handshakeCb = function(response) {
      var str;
      str = '';
      response.on('data', function(chunk) {
        return str += chunk;
      });
      return response.on('end', function() {
        var connTimeout, hbTimeout, match, re, sessionId, transports, _ref1;
        re = /([a-zA-Z0-9-]+)?:(\d*):(\d*)(.*)$/;
        match = re.exec(str);
        if (!match) {
          console.log("handshake failed, error from server:", str);
          return;
        }
        _ref1 = match.slice(1, 4), sessionId = _ref1[0], hbTimeout = _ref1[1], connTimeout = _ref1[2], transports = _ref1[3];
        hbTimeout = +hbTimeout;
        connTimeout = +connTimeout;
        console.log("[sessionId, hbTimeout, connTimeout, transports]", [sessionId, hbTimeout, connTimeout, transports]);
        return websocketConnect(sessionId);
      });
    };
    console.log("handshake start..");
    req = http.request(options, handshakeCb);
    return req.end();
  };

  handshakeStart();

}).call(this);
